{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ToDoListService {\n  constructor() {\n    this.LocalAddedTasks = [{\n      Id: 1,\n      TaskName: 'Помыть посуду'\n    }, {\n      Id: 2,\n      TaskName: 'Приготовить ужин'\n    }, {\n      Id: 3,\n      TaskName: 'Погулять в парке'\n    }, {\n      Id: 4,\n      TaskName: 'Поговорить с Ларисой'\n    }, {\n      Id: 5,\n      TaskName: 'Работать'\n    }];\n  }\n  SaveTask(taskname) {\n    const FindMaxId = Math.max.apply(Math, this.LocalAddedTasks.map(function (number) {\n      return number.Id;\n    }));\n    console.log(FindMaxId);\n  }\n}\nToDoListService.ɵfac = function ToDoListService_Factory(t) {\n  return new (t || ToDoListService)();\n};\nToDoListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ToDoListService,\n  factory: ToDoListService.ɵfac\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAF5BC;IAIW,oBAAe,GAAY,CAC9B;MACIC,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE;KACb,EACD;MACID,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE;KACb,EACD;MACID,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE;KACb,EACD;MACID,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE;KACb,EACD;MACID,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE;KACb,CACJ;;EAEMC,QAAQ,CAACC,QAAgB;IAE5B,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACC,KAAK,CAACF,IAAI,EAAE,IAAI,CAACG,eAAe,CAACC,GAAG,CAAC,UAAUC,MAAM;MAC5E,OAAOA,MAAM,CAACV,EAAE;IACpB,CAAC,CAAC,CAAC;IAEHW,OAAO,CAACC,GAAG,CAACR,SAAS,CAAC;EAC1B;;AAhCSN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAe,SAAff,eAAe;AAAA","names":["ToDoListService","constructor","Id","TaskName","SaveTask","taskname","FindMaxId","Math","max","apply","LocalAddedTasks","map","number","console","log","factory"],"sourceRoot":"","sources":["D:\\aiO\\Working\\Курс\\ToDoList\\ToDoList\\ToDoList\\ClientApp\\src\\app\\services\\todolist\\todolist.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { TTask } from \"src/app/module/content-types/task-types/task.type\";\r\n\r\n@Injectable()\r\n\r\nexport class ToDoListService {\r\n\r\n    public LocalAddedTasks: TTask[] = [\r\n        {\r\n            Id: 1,\r\n            TaskName: 'Помыть посуду'\r\n        },\r\n        {\r\n            Id: 2,\r\n            TaskName: 'Приготовить ужин'\r\n        },\r\n        {\r\n            Id: 3,\r\n            TaskName: 'Погулять в парке'\r\n        },\r\n        {\r\n            Id: 4,\r\n            TaskName: 'Поговорить с Ларисой'\r\n        },\r\n        {\r\n            Id: 5,\r\n            TaskName: 'Работать'\r\n        }\r\n    ]\r\n\r\n    public SaveTask(taskname: string) {\r\n\r\n        const FindMaxId = Math.max.apply(Math, this.LocalAddedTasks.map(function (number) {\r\n            return number.Id\r\n        }));\r\n\r\n        console.log(FindMaxId)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}